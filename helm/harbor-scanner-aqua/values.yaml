nameOverride: ""
fullnameOverride: ""

service:
  ## type Kubernetes service type
  type: "ClusterIP"
  ## port Kubernetes service port
  port: 8080

## replicaCount the number of scanner adapter Pods to run
replicaCount: 1

initResources:
  requests:
    cpu: 200m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 256Mi

mainResources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 1
    memory: 512Mi

aqua:
  ## version the version of Aqua Enterprise that the adapter operates against
  version: 5.0
  registry:
    ## server the Aqua Docker registry server
    server: "registry.aquasec.com"
    ## username the Aqua Docker registry username
    username: ""
    ## password the Aqua Docker registry password
    password: ""
  image:
    pullPolicy: "IfNotPresent"

scanner:
  image:
    registry: "docker.io"
    repository: "aquasec/harbor-scanner-aqua"
    tag: "0.14.0"
    pullPolicy: "IfNotPresent"
  logLevel: info
  api:
    ## tlsEnabled the flag to enable TLS for HTTP
    tlsEnabled: false
    ## tlsCertificate the absolute path to the x509 certificate file
    tlsCertificate: ""
    ## tlsKey the absolute path to the x509 private key file
    tlsKey: ""
    ## readTimeout the maximum duration for reading the entire request, including the body
    readTimeout: 15s
    ## writeTimeout the maximum duration before timing out writes of the response
    writeTimeout: 15s
    ## idleTimeout the maximum amount of time to wait for the next request when keep-alives are enabled
    idleTimeout: 60s
  aqua:
    ## username Aqua management console username
    username: ""
    ## password Aqua management console password
    password: ""
    ## host Aqua management console address
    host: "http://csp-console-svc.aqua:8080"
    ## registry the name of the Harbor registry configured in Aqua management console
    registry: "Harbor"
    ## reportsDir directory to save temporary scan reports
    reportsDir: "/var/lib/scanner/reports"
    ## useImageTag the flag to determine whether the image tag or digest is used in the image reference passed to `scannercli`
    useImageTag: false
    ## scannerCLINoVerify the flag passed to `scannercli` to skip verifying TLS certificates
    scannerCLINoVerify: false
    ## scannerCLIShowNegligible the flag passed to `scannercli` to show negligible/unknown severity vulnerabilities
    scannerCLIShowNegligible: true
    ## scannerCLIOverrideRegistryCredentials the flag to enable passing `--robot-username` and `--robot-password`
    ## flags to the `scannercli` executable binary
    scannerCLIOverrideRegistryCredentials: false
    ## scannerCLIDirectCC the flag passed to `scannercli` to contact CyberCenter directly (rather than through the Aqua server)
    scannerCLIDirectCC: false
    ## scannerCLIRegisterImages the flag to determine whether images are registered in Aqua management console:
    ## `Never` - skips registration
    ## `Compliant` - registers only compliant images
    ## `Always` - registers compliant and non-compliant images
    scannerCLIRegisterImages: Never
  store:
    ## redisNamespace the namespace for keys in the Redis store
    redisNamespace: "harbor.scanner.aqua:store"
    ## redisScanJobTTL the time to live for persisting scan jobs and associated scan reports
    redisScanJobTTL: "1h"
  redis:
    ## poolURL the Redis server URI. The URI supports schemas to connect to a standalone Redis server,
    ## i.e. `redis://:password@standalone_host:port/db-number` and Redis Sentinel deployment,
    ## i.e. `redis+sentinel://:password@sentinel_host1:port1,sentinel_host2:port2/monitor-name/db-number`.
    poolURL: "redis://harbor-harbor-redis:6379"
    ## poolMaxActive the max number of connections allocated by the Redis connection pool
    poolMaxActive: 5
    ## poolMaxIdle the max number of idle connections in the Redis connection pool
    poolMaxIdle: 5
    ## poolIdleTimeout the duration after which idle connections to the Redis server are closed.
    ## If the value is zero, then idle connections are not closed.
    poolIdleTimeout: 5m
    ## poolConnectionTimeout the timeout for connecting to the Redis server
    poolConnectionTimeout: 1s
    ## poolReadTimeout the timeout for reading a single Redis command reply
    poolReadTimeout: 1s
    ## poolWriteTimeout The timeout for writing a single Redis command
    poolWriteTimeout: 1s
